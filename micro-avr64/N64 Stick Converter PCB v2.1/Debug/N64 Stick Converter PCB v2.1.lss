
N64 Stick Converter PCB v2.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eeprom       0000000d  00810000  00810000  0000075c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000009c0  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000275  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000013a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d8  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a9  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000026a  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095d  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000278  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090d  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000044  00000000  00000000  00003411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  00003455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>
  1e:	07 c0       	rjmp	.+14     	; 0x2e <__bad_interrupt>
  20:	06 c0       	rjmp	.+12     	; 0x2e <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	46 d1       	rcall	.+652    	; 0x2b8 <main>
  2c:	5b c3       	rjmp	.+1718   	; 0x6e4 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <GetX>:
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
  30:	81 e0       	ldi	r24, 0x01	; 1
  32:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
  34:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
  36:	36 99       	sbic	0x06, 6	; 6
  38:	fe cf       	rjmp	.-4      	; 0x36 <__CCP__+0x2>
	return ADC;
  3a:	24 b1       	in	r18, 0x04	; 4
  3c:	35 b1       	in	r19, 0x05	; 5
}
  3e:	c9 01       	movw	r24, r18
  40:	08 95       	ret

00000042 <GetY>:

uint16_t GetY(void){	
	ADMUX = 0x00;					// ADC Channel 0
  42:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
  44:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
  46:	36 99       	sbic	0x06, 6	; 6
  48:	fe cf       	rjmp	.-4      	; 0x46 <GetY+0x4>
	return ADC;
  4a:	24 b1       	in	r18, 0x04	; 4
  4c:	35 b1       	in	r19, 0x05	; 5
}
  4e:	c9 01       	movw	r24, r18
  50:	08 95       	ret

00000052 <RotateLeft>:

uint8_t RotateLeft (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<7) )
  52:	87 fd       	sbrc	r24, 7
  54:	02 c0       	rjmp	.+4      	; 0x5a <RotateLeft+0x8>
		result = (cData<<1)|(1<<0);
	else 
		result = (cData<<1);	
  56:	88 0f       	add	r24, r24
	return result;
}
  58:	08 95       	ret
}

uint8_t RotateLeft (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<7) )
		result = (cData<<1)|(1<<0);
  5a:	88 0f       	add	r24, r24
  5c:	81 60       	ori	r24, 0x01	; 1
  5e:	08 95       	ret

00000060 <RotateRight>:
	return result;
}

uint8_t RotateRight (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<0) )
  60:	80 fd       	sbrc	r24, 0
  62:	02 c0       	rjmp	.+4      	; 0x68 <RotateRight+0x8>
		result = (cData>>1)|(1<<7);
	else
		result = (cData>>1);	
  64:	86 95       	lsr	r24
	return result;
}
  66:	08 95       	ret
}

uint8_t RotateRight (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<0) )
		result = (cData>>1)|(1<<7);
  68:	86 95       	lsr	r24
  6a:	80 68       	ori	r24, 0x80	; 128
  6c:	08 95       	ret

0000006e <Calibration>:
	else
		result = (cData>>1);	
	return result;
}

void Calibration(void){	
  6e:	2f 92       	push	r2
  70:	3f 92       	push	r3
  72:	4f 92       	push	r4
  74:	5f 92       	push	r5
  76:	6f 92       	push	r6
  78:	7f 92       	push	r7
  7a:	8f 92       	push	r8
  7c:	9f 92       	push	r9
  7e:	af 92       	push	r10
  80:	bf 92       	push	r11
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	c4 50       	subi	r28, 0x04	; 4
  98:	cd bf       	out	0x3d, r28	; 61
	uint16_t xDeadzone, yDeadzone;
	uint16_t xFaktor, yFaktor;
	uint8_t nSchreibzugriffe = 0;

	
	switch ( eeprom_read_byte(&calibrationStep) )
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	f7 d2       	rcall	.+1518   	; 0x68e <__eerd_byte_tn24a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <Calibration+0x38>
  a4:	3f c0       	rjmp	.+126    	; 0x124 <__stack+0x45>
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	c0 f5       	brcc	.+112    	; 0x11a <__stack+0x3b>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	21 f1       	breq	.+72     	; 0xf6 <__stack+0x17>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	09 f0       	breq	.+2      	; 0xb4 <Calibration+0x46>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <Calibration+0x44>
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
  b8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
  ba:	36 99       	sbic	0x06, 6	; 6
  bc:	fe cf       	rjmp	.-4      	; 0xba <Calibration+0x4c>
	return ADC;
  be:	04 b1       	in	r16, 0x04	; 4
  c0:	15 b1       	in	r17, 0x05	; 5
			break;
			
		case 2:
			//Bestimmung xabsolute und d_x
			temp1 = GetX();												// temp1 = right2neutral
			temp2 = (eeprom_read_word(&leftToNeutral) + temp1 ) / 2;	// temp2 = xabsolute
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	eb d2       	rcall	.+1494   	; 0x69e <__eerd_word_tn24a>
  c8:	7c 01       	movw	r14, r24
  ca:	e0 0e       	add	r14, r16
  cc:	f1 1e       	adc	r15, r17
  ce:	f6 94       	lsr	r15
  d0:	e7 94       	ror	r14
			eeprom_write_word(&xAbsolute, temp2);	
  d2:	89 e0       	ldi	r24, 0x09	; 9
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	b7 01       	movw	r22, r14
  d8:	f3 d2       	rcall	.+1510   	; 0x6c0 <__eewr_word_tn24a>
			//X Deadzone bestimmen	
			if (temp1>temp2)
  da:	e0 16       	cp	r14, r16
  dc:	f1 06       	cpc	r15, r17
  de:	c8 f4       	brcc	.+50     	; 0x112 <__stack+0x33>
				xDeadzone = temp1 - temp2;
  e0:	b8 01       	movw	r22, r16
  e2:	6e 19       	sub	r22, r14
  e4:	7f 09       	sbc	r23, r15
				xDeadzone = temp2 - temp1;
			// Wenn Deadzone vorhanden, dann um 1 erhöhen
			if (yDeadzone > 0)
				yDeadzone++;
						
			eeprom_write_byte( &dx, (uint8_t) xDeadzone);				
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	dc d2       	rcall	.+1464   	; 0x6a4 <__eewr_byte_tn24a>
			//nächster Schritt			
			eeprom_write_byte(&calibrationStep, 3);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	63 e0       	ldi	r22, 0x03	; 3
  f2:	d8 d2       	rcall	.+1456   	; 0x6a4 <__eewr_byte_tn24a>
			break;
  f4:	de cf       	rjmp	.-68     	; 0xb2 <Calibration+0x44>
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
  f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
  f8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
  fa:	36 99       	sbic	0x06, 6	; 6
  fc:	fe cf       	rjmp	.-4      	; 0xfa <__stack+0x1b>
	return ADC;
  fe:	64 b1       	in	r22, 0x04	; 4
 100:	75 b1       	in	r23, 0x05	; 5
	switch ( eeprom_read_byte(&calibrationStep) )
	{
		
		case 1:
			//Bestimmung left2neutral
			eeprom_write_word(&leftToNeutral, GetX() );			
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	dc d2       	rcall	.+1464   	; 0x6c0 <__eewr_word_tn24a>
			//nächster Schritt		
			eeprom_write_byte(&calibrationStep, 2);
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	ca d2       	rcall	.+1428   	; 0x6a4 <__eewr_byte_tn24a>
			break;
 110:	d0 cf       	rjmp	.-96     	; 0xb2 <Calibration+0x44>
			eeprom_write_word(&xAbsolute, temp2);	
			//X Deadzone bestimmen	
			if (temp1>temp2)
				xDeadzone = temp1 - temp2;
			else
				xDeadzone = temp2 - temp1;
 112:	b7 01       	movw	r22, r14
 114:	60 1b       	sub	r22, r16
 116:	71 0b       	sbc	r23, r17
 118:	e6 cf       	rjmp	.-52     	; 0xe6 <__stack+0x7>
	uint16_t xDeadzone, yDeadzone;
	uint16_t xFaktor, yFaktor;
	uint8_t nSchreibzugriffe = 0;

	
	switch ( eeprom_read_byte(&calibrationStep) )
 11a:	84 30       	cpi	r24, 0x04	; 4
 11c:	89 f0       	breq	.+34     	; 0x140 <__stack+0x61>
 11e:	85 30       	cpi	r24, 0x05	; 5
 120:	99 f1       	breq	.+102    	; 0x188 <__stack+0xa9>
 122:	c7 cf       	rjmp	.-114    	; 0xb2 <Calibration+0x44>
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
	return ADC;
}

uint16_t GetY(void){	
	ADMUX = 0x00;					// ADC Channel 0
 124:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 126:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 128:	36 99       	sbic	0x06, 6	; 6
 12a:	fe cf       	rjmp	.-4      	; 0x128 <__stack+0x49>
	return ADC;
 12c:	64 b1       	in	r22, 0x04	; 4
 12e:	75 b1       	in	r23, 0x05	; 5
			eeprom_write_byte(&calibrationStep, 3);
			break;
			
		case 3:
			//Bestimmung up2neutral
			eeprom_write_word(&upToNeutral, GetY() );			
 130:	87 e0       	ldi	r24, 0x07	; 7
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	c5 d2       	rcall	.+1418   	; 0x6c0 <__eewr_word_tn24a>
			//nächster Schritt		
			eeprom_write_byte(&calibrationStep, 4);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	64 e0       	ldi	r22, 0x04	; 4
 13c:	b3 d2       	rcall	.+1382   	; 0x6a4 <__eewr_byte_tn24a>
			break;
 13e:	b9 cf       	rjmp	.-142    	; 0xb2 <Calibration+0x44>
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
	return ADC;
}

uint16_t GetY(void){	
	ADMUX = 0x00;					// ADC Channel 0
 140:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 142:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 144:	36 99       	sbic	0x06, 6	; 6
 146:	fe cf       	rjmp	.-4      	; 0x144 <__stack+0x65>
	return ADC;
 148:	04 b1       	in	r16, 0x04	; 4
 14a:	15 b1       	in	r17, 0x05	; 5
			break;
			
		case 4:
			//Bestimmung yabsolute und d_y
			temp1 = GetY();											// temp1 = down2neutral
			temp2 = (eeprom_read_word(&upToNeutral) + temp1 ) / 2;	// temp2 = yabsolut
 14c:	87 e0       	ldi	r24, 0x07	; 7
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	a6 d2       	rcall	.+1356   	; 0x69e <__eerd_word_tn24a>
 152:	7c 01       	movw	r14, r24
 154:	e0 0e       	add	r14, r16
 156:	f1 1e       	adc	r15, r17
 158:	f6 94       	lsr	r15
 15a:	e7 94       	ror	r14
			eeprom_write_word(&yAbsolute, temp2);			
 15c:	8b e0       	ldi	r24, 0x0B	; 11
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	b7 01       	movw	r22, r14
 162:	ae d2       	rcall	.+1372   	; 0x6c0 <__eewr_word_tn24a>
			// Y Deadzone bestimmen
			if (temp1>temp2)
 164:	e0 16       	cp	r14, r16
 166:	f1 06       	cpc	r15, r17
 168:	88 f5       	brcc	.+98     	; 0x1cc <__stack+0xed>
				yDeadzone = temp1 - temp2;
 16a:	b8 01       	movw	r22, r16
 16c:	6e 19       	sub	r22, r14
 16e:	7f 09       	sbc	r23, r15
			else
				yDeadzone = temp2 - temp1;
			// Wenn Deadzone vorhanden, dann um 1 erhöhen
			if (yDeadzone > 0)
 170:	61 15       	cp	r22, r1
 172:	71 05       	cpc	r23, r1
 174:	11 f0       	breq	.+4      	; 0x17a <__stack+0x9b>
				yDeadzone++;
 176:	6f 5f       	subi	r22, 0xFF	; 255
 178:	7f 4f       	sbci	r23, 0xFF	; 255
			eeprom_write_byte( &dy, (uint8_t) yDeadzone);				
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	92 d2       	rcall	.+1316   	; 0x6a4 <__eewr_byte_tn24a>
			//nächster Schritt			
			eeprom_write_byte(&calibrationStep, 5);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	8e d2       	rcall	.+1308   	; 0x6a4 <__eewr_byte_tn24a>
			
		case 5:	
					
			//Bestimmung der Faktoren; Deadzone berücksichtigen!
			xDeadzone = (uint16_t) eeprom_read_byte(&dx);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	80 d2       	rcall	.+1280   	; 0x68e <__eerd_byte_tn24a>
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	3a 83       	std	Y+2, r19	; 0x02
 194:	29 83       	std	Y+1, r18	; 0x01
			yDeadzone = (uint16_t) eeprom_read_byte(&dy);	
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	79 d2       	rcall	.+1266   	; 0x68e <__eerd_byte_tn24a>
 19c:	28 2e       	mov	r2, r24
 19e:	33 24       	eor	r3, r3
						
			// wenn beide Deadzones = 0, dann neutrale 
			// Position einfach aus ADC einlesen
			if ( (xDeadzone==0) && (yDeadzone==0) )					
 1a0:	49 81       	ldd	r20, Y+1	; 0x01
 1a2:	5a 81       	ldd	r21, Y+2	; 0x02
 1a4:	41 15       	cp	r20, r1
 1a6:	51 05       	cpc	r21, r1
 1a8:	a9 f4       	brne	.+42     	; 0x1d4 <__stack+0xf5>
 1aa:	21 14       	cp	r2, r1
 1ac:	31 04       	cpc	r3, r1
 1ae:	91 f4       	brne	.+36     	; 0x1d4 <__stack+0xf5>
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 1b4:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 1b6:	36 99       	sbic	0x06, 6	; 6
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <__stack+0xd7>
	return ADC;
 1ba:	64 b0       	in	r6, 0x04	; 4
 1bc:	75 b0       	in	r7, 0x05	; 5
}

uint16_t GetY(void){	
	ADMUX = 0x00;					// ADC Channel 0
 1be:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 1c0:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 1c2:	36 99       	sbic	0x06, 6	; 6
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <__stack+0xe3>
	return ADC;
 1c6:	84 b0       	in	r8, 0x04	; 4
 1c8:	95 b0       	in	r9, 0x05	; 5
			// wenn beide Deadzones = 0, dann neutrale 
			// Position einfach aus ADC einlesen
			if ( (xDeadzone==0) && (yDeadzone==0) )					
			{
				xNeutral16 = GetX();		
				yNeutral16 = GetY();
 1ca:	0c c0       	rjmp	.+24     	; 0x1e4 <__stack+0x105>
			eeprom_write_word(&yAbsolute, temp2);			
			// Y Deadzone bestimmen
			if (temp1>temp2)
				yDeadzone = temp1 - temp2;
			else
				yDeadzone = temp2 - temp1;
 1cc:	b7 01       	movw	r22, r14
 1ce:	60 1b       	sub	r22, r16
 1d0:	71 0b       	sbc	r23, r17
 1d2:	ce cf       	rjmp	.-100    	; 0x170 <__stack+0x91>
				yNeutral16 = GetY();
			}
			// ansonsten neutrale Position aus EEPROM lesen
			else
			{
				xNeutral16 = eeprom_read_word(&xAbsolute);
 1d4:	89 e0       	ldi	r24, 0x09	; 9
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	62 d2       	rcall	.+1220   	; 0x69e <__eerd_word_tn24a>
 1da:	3c 01       	movw	r6, r24
				yNeutral16 = eeprom_read_word(&yAbsolute);
 1dc:	8b e0       	ldi	r24, 0x0B	; 11
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	5e d2       	rcall	.+1212   	; 0x69e <__eerd_word_tn24a>
 1e2:	4c 01       	movw	r8, r24
			
			// alle min und max Werte zurücksetzen
			xMin = xNeutral16;								
			xMax = xNeutral16;
			yMin = yNeutral16;
			yMax = yNeutral16;
 1e4:	9c 82       	std	Y+4, r9	; 0x04
 1e6:	8b 82       	std	Y+3, r8	; 0x03
			}
			
			// alle min und max Werte zurücksetzen
			xMin = xNeutral16;								
			xMax = xNeutral16;
			yMin = yNeutral16;
 1e8:	84 01       	movw	r16, r8
				yNeutral16 = eeprom_read_word(&yAbsolute);
			}
			
			// alle min und max Werte zurücksetzen
			xMin = xNeutral16;								
			xMax = xNeutral16;
 1ea:	73 01       	movw	r14, r6
				xNeutral16 = eeprom_read_word(&xAbsolute);
				yNeutral16 = eeprom_read_word(&yAbsolute);
			}
			
			// alle min und max Werte zurücksetzen
			xMin = xNeutral16;								
 1ec:	63 01       	movw	r12, r6
	uint16_t xNeutral16, yNeutral16;
	uint16_t xMin, xMax, yMin, yMax;
	uint16_t timerCounter = 0;
	uint16_t xDeadzone, yDeadzone;
	uint16_t xFaktor, yFaktor;
	uint8_t nSchreibzugriffe = 0;
 1ee:	aa 24       	eor	r10, r10
void Calibration(void){	
	
	uint16_t temp1, temp2;
	uint16_t xNeutral16, yNeutral16;
	uint16_t xMin, xMax, yMin, yMax;
	uint16_t timerCounter = 0;
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
 1f4:	bb 24       	eor	r11, r11
 1f6:	b3 94       	inc	r11
					else
						temp1 = xNeutral16 - xMin;												
					// Deadzone abziehen													
					temp1 = temp1 - xDeadzone;		
					// Verstärkungsfaktor berechnen				
					xFaktor = ((MIN_RANGE*256)/temp1);							
 1f8:	41 2c       	mov	r4, r1
 1fa:	81 e5       	ldi	r24, 0x51	; 81
 1fc:	58 2e       	mov	r5, r24
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
 1fe:	b7 b8       	out	0x07, r11	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 200:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 202:	36 99       	sbic	0x06, 6	; 6
 204:	fe cf       	rjmp	.-4      	; 0x202 <__stack+0x123>
	return ADC;
 206:	84 b1       	in	r24, 0x04	; 4
 208:	95 b1       	in	r25, 0x05	; 5
 20a:	e8 16       	cp	r14, r24
 20c:	f9 06       	cpc	r15, r25
 20e:	08 f4       	brcc	.+2      	; 0x212 <__stack+0x133>
 210:	7c 01       	movw	r14, r24
 212:	8c 15       	cp	r24, r12
 214:	9d 05       	cpc	r25, r13
 216:	08 f4       	brcc	.+2      	; 0x21a <__stack+0x13b>
 218:	6c 01       	movw	r12, r24
}

uint16_t GetY(void){	
	ADMUX = 0x00;					// ADC Channel 0
 21a:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 21c:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 21e:	36 99       	sbic	0x06, 6	; 6
 220:	fe cf       	rjmp	.-4      	; 0x21e <__stack+0x13f>
	return ADC;
 222:	84 b1       	in	r24, 0x04	; 4
 224:	95 b1       	in	r25, 0x05	; 5
 226:	eb 81       	ldd	r30, Y+3	; 0x03
 228:	fc 81       	ldd	r31, Y+4	; 0x04
 22a:	e8 17       	cp	r30, r24
 22c:	f9 07       	cpc	r31, r25
 22e:	10 f4       	brcc	.+4      	; 0x234 <__stack+0x155>
 230:	9c 83       	std	Y+4, r25	; 0x04
 232:	8b 83       	std	Y+3, r24	; 0x03
 234:	80 17       	cp	r24, r16
 236:	91 07       	cpc	r25, r17
 238:	08 f4       	brcc	.+2      	; 0x23c <__stack+0x15d>
 23a:	8c 01       	movw	r16, r24
				if (temp1 > yMax)
					yMax = temp1;					
				if (temp1 < yMin)
					yMin = temp1;	
					
				timerCounter++;
 23c:	2f 5f       	subi	r18, 0xFF	; 255
 23e:	3f 4f       	sbci	r19, 0xFF	; 255
				
				// ca. jede Sekunde, aber insg. höchstens 60 Mal:
				if ( (timerCounter>4000) && (nSchreibzugriffe<60) )
 240:	ff e0       	ldi	r31, 0x0F	; 15
 242:	21 3a       	cpi	r18, 0xA1	; 161
 244:	3f 07       	cpc	r19, r31
 246:	d8 f2       	brcs	.-74     	; 0x1fe <__stack+0x11f>
 248:	4a 2d       	mov	r20, r10
 24a:	4c 33       	cpi	r20, 0x3C	; 60
 24c:	c0 f6       	brcc	.-80     	; 0x1fe <__stack+0x11f>
				{	
					// Kalibrierung beendet
					eeprom_write_byte(&calibrationStep, 0x00);	
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	27 d2       	rcall	.+1102   	; 0x6a4 <__eewr_byte_tn24a>
					nSchreibzugriffe++;	
 256:	a3 94       	inc	r10
					timerCounter = 0;	
					
					// Faktor für X-Achse:				
					if ( (xMax - xNeutral16) < (xNeutral16 - xMin) )
 258:	c7 01       	movw	r24, r14
 25a:	86 19       	sub	r24, r6
 25c:	97 09       	sbc	r25, r7
				// ca. jede Sekunde, aber insg. höchstens 60 Mal:
				if ( (timerCounter>4000) && (nSchreibzugriffe<60) )
				{	
					// Kalibrierung beendet
					eeprom_write_byte(&calibrationStep, 0x00);	
					nSchreibzugriffe++;	
 25e:	b3 01       	movw	r22, r6
 260:	6c 19       	sub	r22, r12
 262:	7d 09       	sbc	r23, r13
 264:	86 17       	cp	r24, r22
 266:	97 07       	cpc	r25, r23
 268:	08 f4       	brcc	.+2      	; 0x26c <__stack+0x18d>
 26a:	bc 01       	movw	r22, r24
					if ( (xMax - xNeutral16) < (xNeutral16 - xMin) )
						temp1 = xMax - xNeutral16;
					else
						temp1 = xNeutral16 - xMin;												
					// Deadzone abziehen													
					temp1 = temp1 - xDeadzone;		
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	9a 81       	ldd	r25, Y+2	; 0x02
 270:	68 1b       	sub	r22, r24
 272:	79 0b       	sbc	r23, r25
					// Verstärkungsfaktor berechnen				
					xFaktor = ((MIN_RANGE*256)/temp1);							
 274:	c2 01       	movw	r24, r4
 276:	f7 d1       	rcall	.+1006   	; 0x666 <__udivmodhi4>
					// falls Rest übrig, noch einen drauf!	
					if ( ((MIN_RANGE*256)%temp1) > 0  )				
 278:	00 97       	sbiw	r24, 0x00	; 0
 27a:	11 f0       	breq	.+4      	; 0x280 <__stack+0x1a1>
						xFaktor++;			
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
					// im EEPROM speichern					
					eeprom_write_byte(&cx, (uint8_t) xFaktor);	
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0f d2       	rcall	.+1054   	; 0x6a4 <__eewr_byte_tn24a>
					
					// Faktor für Y-Achse:
					if ( (yMax - yNeutral16) < (yNeutral16 - yMin) )
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	9c 81       	ldd	r25, Y+4	; 0x04
 28a:	88 19       	sub	r24, r8
 28c:	99 09       	sbc	r25, r9
					xFaktor = ((MIN_RANGE*256)/temp1);							
					// falls Rest übrig, noch einen drauf!	
					if ( ((MIN_RANGE*256)%temp1) > 0  )				
						xFaktor++;			
					// im EEPROM speichern					
					eeprom_write_byte(&cx, (uint8_t) xFaktor);	
 28e:	b4 01       	movw	r22, r8
 290:	60 1b       	sub	r22, r16
 292:	71 0b       	sbc	r23, r17
 294:	86 17       	cp	r24, r22
 296:	97 07       	cpc	r25, r23
 298:	08 f4       	brcc	.+2      	; 0x29c <__stack+0x1bd>
 29a:	bc 01       	movw	r22, r24
					if ( (yMax - yNeutral16) < (yNeutral16 - yMin) )
						temp1 = yMax - yNeutral16;
					else
						temp1 = yNeutral16 - yMin;			
					// Deadzone abziehen														
					temp1 = temp1 - yDeadzone;		
 29c:	62 19       	sub	r22, r2
 29e:	73 09       	sbc	r23, r3
					// Faktor berechnen					
					yFaktor = ((MIN_RANGE*256)/temp1);			
 2a0:	c2 01       	movw	r24, r4
 2a2:	e1 d1       	rcall	.+962    	; 0x666 <__udivmodhi4>
					// falls Rest übrig , noch einen drauf!			
					if ( ((MIN_RANGE*256)%temp1) > 0  )
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	11 f0       	breq	.+4      	; 0x2ac <__stack+0x1cd>
						yFaktor++;
 2a8:	6f 5f       	subi	r22, 0xFF	; 255
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
					// im EEPROM speichern
					eeprom_write_byte(&cy, (uint8_t) yFaktor);
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	f9 d1       	rcall	.+1010   	; 0x6a4 <__eewr_byte_tn24a>
				if ( (timerCounter>4000) && (nSchreibzugriffe<60) )
				{	
					// Kalibrierung beendet
					eeprom_write_byte(&calibrationStep, 0x00);	
					nSchreibzugriffe++;	
					timerCounter = 0;	
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	a3 cf       	rjmp	.-186    	; 0x1fe <__stack+0x11f>

000002b8 <main>:
uint8_t RotateRight(uint8_t cData);				// rotiert ein Byte um 1 Stelle nach rechts
void Calibration(void);							// umfangreiche Kalibrierungsfunktion
 
 
int main(void)
{	
 2b8:	2f 92       	push	r2
 2ba:	3f 92       	push	r3
 2bc:	4f 92       	push	r4
 2be:	5f 92       	push	r5
 2c0:	6f 92       	push	r6
 2c2:	7f 92       	push	r7
 2c4:	8f 92       	push	r8
 2c6:	9f 92       	push	r9
 2c8:	af 92       	push	r10
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	df 92       	push	r13
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	c4 51       	subi	r28, 0x14	; 20
 2e2:	cd bf       	out	0x3d, r28	; 61
	uint16_t x, y, xOld, yOld;
	uint8_t xNeutral8, yNeutral8;
	uint8_t xWheel = 0b11001100;
	uint8_t yWheel = 0b00110011;
	uint16_t xNeutral16, yNeutral16;
	uint8_t xFaktor = eeprom_read_byte(&cx);	
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	d2 d1       	rcall	.+932    	; 0x68e <__eerd_byte_tn24a>
 2ea:	c8 2e       	mov	r12, r24
	uint8_t yFaktor = eeprom_read_byte(&cy);
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ce d1       	rcall	.+924    	; 0x68e <__eerd_byte_tn24a>
 2f2:	b8 2e       	mov	r11, r24
	uint8_t xDeadzone = eeprom_read_byte(&dx);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ca d1       	rcall	.+916    	; 0x68e <__eerd_byte_tn24a>
 2fa:	28 2e       	mov	r2, r24
	uint8_t yDeadzone = eeprom_read_byte(&dy);
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	c6 d1       	rcall	.+908    	; 0x68e <__eerd_byte_tn24a>
 302:	48 2e       	mov	r4, r24
	uint8_t useDeadzone;
	
	// Setup Ports
	DDRA = (1<<DDA6)|(1<<DDA7);
 304:	80 ec       	ldi	r24, 0xC0	; 192
 306:	8a bb       	out	0x1a, r24	; 26
	DDRB = (1<<DDB0)|(1<<DDB1);
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	87 bb       	out	0x17, r24	; 23
	PORTA = (1<<PORTA2)|(1<<PORTA3)|(1<<PORTA5);
 30c:	8c e2       	ldi	r24, 0x2C	; 44
 30e:	8b bb       	out	0x1b, r24	; 27
	PORTB = (1<<PORTB2);
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	88 bb       	out	0x18, r24	; 24
	
	// nicht benötigte Module deaktivieren
	PRR |= (1<<PRTIM0)|(1<<PRTIM1)|(1<<PRUSI);
 314:	80 b1       	in	r24, 0x00	; 0
 316:	8e 60       	ori	r24, 0x0E	; 14
 318:	80 b9       	out	0x00, r24	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	83 e2       	ldi	r24, 0x23	; 35
 31c:	94 ef       	ldi	r25, 0xF4	; 244
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0x66>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x6c>
 324:	00 00       	nop
	
	// 0.25 s warten bis Spannung stabil
	_delay_ms(250);		
	
	// bestimmen, ob Deadzones verwendet werden:
	if ( (xDeadzone==0) && (yDeadzone==0) )
 326:	22 20       	and	r2, r2
 328:	09 f0       	breq	.+2      	; 0x32c <main+0x74>
 32a:	20 c1       	rjmp	.+576    	; 0x56c <main+0x2b4>
		useDeadzone = 0;
 32c:	dd 24       	eor	r13, r13
 32e:	d3 94       	inc	r13
 330:	44 20       	and	r4, r4
 332:	09 f4       	brne	.+2      	; 0x336 <main+0x7e>
 334:	dd 24       	eor	r13, r13
	else
		useDeadzone = 1;
		
	// Setup ADC
	DIDR0 = (1<<ADC0D)|(1<<ADC1D);			// Digital input disable für PA0+1	
 336:	93 e0       	ldi	r25, 0x03	; 3
 338:	91 b9       	out	0x01, r25	; 1
	ADMUX = 0x01;							// Kanal 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADPS0)|(1<<ADPS1);			// Taktteiler = 8 ==> f_ADC = 125 kHz
 33e:	96 b9       	out	0x06, r25	; 6
	ADCSRA |= (1<<ADEN);					// ADC aktivieren
 340:	37 9a       	sbi	0x06, 7	; 6
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
 342:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 344:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 346:	36 99       	sbic	0x06, 6	; 6
 348:	fe cf       	rjmp	.-4      	; 0x346 <main+0x8e>
	return ADC;
 34a:	84 b1       	in	r24, 0x04	; 4
 34c:	95 b1       	in	r25, 0x05	; 5
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 352:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 354:	36 99       	sbic	0x06, 6	; 6
 356:	fe cf       	rjmp	.-4      	; 0x354 <main+0x9c>
	return ADC;
 358:	64 b0       	in	r6, 0x04	; 4
 35a:	75 b0       	in	r7, 0x05	; 5
	xNeutral16 = GetX();	
	
	// X Wert einlesen:
	xNeutral16 = GetX();	
	// falls Deadzone vorhanden, Absolutwert aus EEPROM lesen
	if (useDeadzone)		
 35c:	dd 20       	and	r13, r13
 35e:	21 f0       	breq	.+8      	; 0x368 <main+0xb0>
		xNeutral16 = eeprom_read_word(&xAbsolute);				
 360:	89 e0       	ldi	r24, 0x09	; 9
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	9c d1       	rcall	.+824    	; 0x69e <__eerd_word_tn24a>
 366:	3c 01       	movw	r6, r24
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
	return ADC;
}

uint16_t GetY(void){	
	ADMUX = 0x00;					// ADC Channel 0
 368:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 36a:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 36c:	36 99       	sbic	0x06, 6	; 6
 36e:	fe cf       	rjmp	.-4      	; 0x36c <main+0xb4>
	return ADC;
 370:	84 b0       	in	r8, 0x04	; 4
 372:	95 b0       	in	r9, 0x05	; 5
	xOld = xNeutral8;
	
	// Y Wert einlesen:
	yNeutral16 = GetY();
	// falls Deadzone vorhanden, Absolutwert aus EEPROM lesen
	if (useDeadzone)		
 374:	dd 20       	and	r13, r13
 376:	21 f0       	breq	.+8      	; 0x380 <main+0xc8>
		yNeutral16 = eeprom_read_word(&yAbsolute);							
 378:	8b e0       	ldi	r24, 0x0B	; 11
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 d1       	rcall	.+800    	; 0x69e <__eerd_word_tn24a>
 37e:	4c 01       	movw	r8, r24
	yNeutral8 = ScaleDown(yNeutral16, yFaktor);
	yOld = yNeutral8;	
	
	// Wenn PINB.2 = 0, dann beim nächsten Einschalten
	// normalen Calibration Mode aktivieren:
	if( ((1<<PINB2)&PINB)==0){
 380:	86 b3       	in	r24, 0x16	; 22
 382:	82 ff       	sbrs	r24, 2
 384:	4a c1       	rjmp	.+660    	; 0x61a <main+0x362>
		while(1);
	}
	
	// Wenn PINA.5 = 0, dann beim nächsten Einschalten
	// Calibration Mode mit Deadzone aktivieren:
	if( ((1<<PINA5)&PINA)==0){
 386:	89 b3       	in	r24, 0x19	; 25
 388:	85 ff       	sbrs	r24, 5
 38a:	42 c1       	rjmp	.+644    	; 0x610 <main+0x358>
		eeprom_write_byte(&calibrationStep, 1);
		while(1);
	}
	
	// Wenn calibration_step != 0, dann Calibration Mode ausführen
	if ( (eeprom_read_byte(&calibrationStep)) > 0x00 ){
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	7e d1       	rcall	.+764    	; 0x68e <__eerd_byte_tn24a>
 392:	81 11       	cpse	r24, r1
		Calibration();
 394:	6c de       	rcall	.-808    	; 0x6e <Calibration>
	}	
	while (1);					
}

uint8_t ScaleDown(uint16_t raw16, uint8_t c){
	return  (uint8_t) ( (raw16*c) >> 8);	
 396:	c3 01       	movw	r24, r6
 398:	6c 2d       	mov	r22, r12
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	52 d1       	rcall	.+676    	; 0x642 <__mulhi3>
	xNeutral16 = GetX();	
	// falls Deadzone vorhanden, Absolutwert aus EEPROM lesen
	if (useDeadzone)		
		xNeutral16 = eeprom_read_word(&xAbsolute);				
	xNeutral8 = ScaleDown(xNeutral16, xFaktor);
	xOld = xNeutral8;
 39e:	a9 2f       	mov	r26, r25
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
	}	
	while (1);					
}

uint8_t ScaleDown(uint16_t raw16, uint8_t c){
	return  (uint8_t) ( (raw16*c) >> 8);	
 3a2:	c4 01       	movw	r24, r8
 3a4:	6b 2d       	mov	r22, r11
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	4c d1       	rcall	.+664    	; 0x642 <__mulhi3>
	yNeutral16 = GetY();
	// falls Deadzone vorhanden, Absolutwert aus EEPROM lesen
	if (useDeadzone)		
		yNeutral16 = eeprom_read_word(&yAbsolute);							
	yNeutral8 = ScaleDown(yNeutral16, yFaktor);
	yOld = yNeutral8;	
 3aa:	49 2f       	mov	r20, r25
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	55 24       	eor	r5, r5
 3b0:	9a 01       	movw	r18, r20
	xNeutral16 = GetX();	
	// falls Deadzone vorhanden, Absolutwert aus EEPROM lesen
	if (useDeadzone)		
		xNeutral16 = eeprom_read_word(&xAbsolute);				
	xNeutral8 = ScaleDown(xNeutral16, xFaktor);
	xOld = xNeutral8;
 3b2:	8d 01       	movw	r16, r26
	yNeutral16 = GetY();
	// falls Deadzone vorhanden, Absolutwert aus EEPROM lesen
	if (useDeadzone)		
		yNeutral16 = eeprom_read_word(&yAbsolute);							
	yNeutral8 = ScaleDown(yNeutral16, yFaktor);
	yOld = yNeutral8;	
 3b4:	93 e3       	ldi	r25, 0x33	; 51
 3b6:	e9 2e       	mov	r14, r25
 3b8:	8c ec       	ldi	r24, 0xCC	; 204
 3ba:	f8 2e       	mov	r15, r24
 3bc:	33 24       	eor	r3, r3
 3be:	f4 01       	movw	r30, r8
 3c0:	e4 0d       	add	r30, r4
 3c2:	f5 1d       	adc	r31, r5
 3c4:	fa 83       	std	Y+2, r31	; 0x02
 3c6:	e9 83       	std	Y+1, r30	; 0x01
 3c8:	b4 01       	movw	r22, r8
 3ca:	64 19       	sub	r22, r4
 3cc:	75 09       	sbc	r23, r5
 3ce:	7c 83       	std	Y+4, r23	; 0x04
 3d0:	6b 83       	std	Y+3, r22	; 0x03
		if (x>xNeutral8)
			if ( (x-xNeutral8) > MAX_RANGE)
				x = xNeutral8 + MAX_RANGE;
		if (x<xNeutral8)
			if ( (xNeutral8-x) > MAX_RANGE)
				x = xNeutral8 - MAX_RANGE;		
 3d2:	cd 01       	movw	r24, r26
 3d4:	84 55       	subi	r24, 0x54	; 84
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	9e 83       	std	Y+6, r25	; 0x06
 3da:	8d 83       	std	Y+5, r24	; 0x05
		// runterskalieren	
		x = ScaleDown( x, xFaktor);
		// auf +/-84 begrenzen
		if (x>xNeutral8)
			if ( (x-xNeutral8) > MAX_RANGE)
				x = xNeutral8 + MAX_RANGE;
 3dc:	fd 01       	movw	r30, r26
 3de:	ec 5a       	subi	r30, 0xAC	; 172
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	f8 87       	std	Y+8, r31	; 0x08
 3e4:	ef 83       	std	Y+7, r30	; 0x07
					x = xNeutral16;
				else
					x = x - xDeadzone;
			}
			if (x < xNeutral16){
				if (x >= (xNeutral16-xDeadzone))
 3e6:	b3 01       	movw	r22, r6
 3e8:	62 19       	sub	r22, r2
 3ea:	73 09       	sbc	r23, r3
 3ec:	7a 87       	std	Y+10, r23	; 0x0a
 3ee:	69 87       	std	Y+9, r22	; 0x09
		// X Wert einlesen:
		x = GetX();		
		// Deadzone berücksichtigen
		if (useDeadzone){			
			if (x > xNeutral16){
				if (x <= (xNeutral16+xDeadzone))
 3f0:	c3 01       	movw	r24, r6
 3f2:	82 0d       	add	r24, r2
 3f4:	93 1d       	adc	r25, r3
 3f6:	9c 87       	std	Y+12, r25	; 0x0c
 3f8:	8b 87       	std	Y+11, r24	; 0x0b
		if (y>yNeutral8)
			if ( (y-yNeutral8) > MAX_RANGE)
				y = yNeutral8 + MAX_RANGE;
		if (y<yNeutral8)
			if ( (yNeutral8-y) > MAX_RANGE)
				y = yNeutral8 - MAX_RANGE;
 3fa:	fa 01       	movw	r30, r20
 3fc:	e4 55       	subi	r30, 0x54	; 84
 3fe:	f0 40       	sbci	r31, 0x00	; 0
 400:	fe 87       	std	Y+14, r31	; 0x0e
 402:	ed 87       	std	Y+13, r30	; 0x0d
		// runterskalieren	
		y = ScaleDown(y, yFaktor);		
		// auf +/-84 begrenzen
		if (y>yNeutral8)
			if ( (y-yNeutral8) > MAX_RANGE)
				y = yNeutral8 + MAX_RANGE;
 404:	ba 01       	movw	r22, r20
 406:	6c 5a       	subi	r22, 0xAC	; 172
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	78 8b       	std	Y+16, r23	; 0x10
 40c:	6f 87       	std	Y+15, r22	; 0x0f
 40e:	3a 8b       	std	Y+18, r19	; 0x12
 410:	29 8b       	std	Y+17, r18	; 0x11
 412:	2e 2d       	mov	r18, r14
 414:	c8 01       	movw	r24, r16
 416:	1f 2d       	mov	r17, r15
 418:	5c 8b       	std	Y+20, r21	; 0x14
 41a:	4b 8b       	std	Y+19, r20	; 0x13
 41c:	7c 01       	movw	r14, r24
 41e:	02 2f       	mov	r16, r18
	
}


uint16_t GetX(void){	
	ADMUX = 0x01;					// ADC Channel 1	
 420:	71 e0       	ldi	r23, 0x01	; 1
 422:	77 b9       	out	0x07, r23	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 424:	36 9a       	sbi	0x06, 6	; 6
 426:	89 89       	ldd	r24, Y+17	; 0x11
 428:	9a 89       	ldd	r25, Y+18	; 0x12
 42a:	eb 89       	ldd	r30, Y+19	; 0x13
 42c:	fc 89       	ldd	r31, Y+20	; 0x14
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 42e:	36 99       	sbic	0x06, 6	; 6
 430:	fe cf       	rjmp	.-4      	; 0x42e <main+0x176>
 432:	9a 8b       	std	Y+18, r25	; 0x12
 434:	89 8b       	std	Y+17, r24	; 0x11
 436:	fc 8b       	std	Y+20, r31	; 0x14
 438:	eb 8b       	std	Y+19, r30	; 0x13
	return ADC;
 43a:	84 b1       	in	r24, 0x04	; 4
 43c:	95 b1       	in	r25, 0x05	; 5
    {	
		
		// X Wert einlesen:
		x = GetX();		
		// Deadzone berücksichtigen
		if (useDeadzone){			
 43e:	dd 20       	and	r13, r13
 440:	b1 f0       	breq	.+44     	; 0x46e <main+0x1b6>
			if (x > xNeutral16){
 442:	68 16       	cp	r6, r24
 444:	79 06       	cpc	r7, r25
 446:	40 f4       	brcc	.+16     	; 0x458 <main+0x1a0>
				if (x <= (xNeutral16+xDeadzone))
 448:	eb 85       	ldd	r30, Y+11	; 0x0b
 44a:	fc 85       	ldd	r31, Y+12	; 0x0c
 44c:	e8 17       	cp	r30, r24
 44e:	f9 07       	cpc	r31, r25
 450:	08 f0       	brcs	.+2      	; 0x454 <main+0x19c>
 452:	d3 c0       	rjmp	.+422    	; 0x5fa <main+0x342>
					x = xNeutral16;
				else
					x = x - xDeadzone;
 454:	82 19       	sub	r24, r2
 456:	93 09       	sbc	r25, r3
			}
			if (x < xNeutral16){
 458:	86 15       	cp	r24, r6
 45a:	97 05       	cpc	r25, r7
 45c:	40 f4       	brcc	.+16     	; 0x46e <main+0x1b6>
				if (x >= (xNeutral16-xDeadzone))
 45e:	29 85       	ldd	r18, Y+9	; 0x09
 460:	3a 85       	ldd	r19, Y+10	; 0x0a
 462:	82 17       	cp	r24, r18
 464:	93 07       	cpc	r25, r19
 466:	08 f0       	brcs	.+2      	; 0x46a <main+0x1b2>
 468:	c8 c0       	rjmp	.+400    	; 0x5fa <main+0x342>
					x = xNeutral16;
				else
					x = x + xDeadzone;
 46a:	82 0d       	add	r24, r2
 46c:	93 1d       	adc	r25, r3
	}	
	while (1);					
}

uint8_t ScaleDown(uint16_t raw16, uint8_t c){
	return  (uint8_t) ( (raw16*c) >> 8);	
 46e:	6c 2d       	mov	r22, r12
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	e7 d0       	rcall	.+462    	; 0x642 <__mulhi3>
				else
					x = x + xDeadzone;
			}
		}	
		// runterskalieren	
		x = ScaleDown( x, xFaktor);
 474:	29 2f       	mov	r18, r25
 476:	30 e0       	ldi	r19, 0x00	; 0
		// auf +/-84 begrenzen
		if (x>xNeutral8)
 478:	a2 17       	cp	r26, r18
 47a:	b3 07       	cpc	r27, r19
 47c:	40 f4       	brcc	.+16     	; 0x48e <main+0x1d6>
			if ( (x-xNeutral8) > MAX_RANGE)
 47e:	c9 01       	movw	r24, r18
 480:	8a 1b       	sub	r24, r26
 482:	9b 0b       	sbc	r25, r27
 484:	85 35       	cpi	r24, 0x55	; 85
 486:	91 05       	cpc	r25, r1
 488:	10 f0       	brcs	.+4      	; 0x48e <main+0x1d6>
				x = xNeutral8 + MAX_RANGE;
 48a:	2f 81       	ldd	r18, Y+7	; 0x07
 48c:	38 85       	ldd	r19, Y+8	; 0x08
		if (x<xNeutral8)
 48e:	2a 17       	cp	r18, r26
 490:	3b 07       	cpc	r19, r27
 492:	40 f4       	brcc	.+16     	; 0x4a4 <main+0x1ec>
			if ( (xNeutral8-x) > MAX_RANGE)
 494:	cd 01       	movw	r24, r26
 496:	82 1b       	sub	r24, r18
 498:	93 0b       	sbc	r25, r19
 49a:	85 35       	cpi	r24, 0x55	; 85
 49c:	91 05       	cpc	r25, r1
 49e:	10 f0       	brcs	.+4      	; 0x4a4 <main+0x1ec>
				x = xNeutral8 - MAX_RANGE;		
 4a0:	2d 81       	ldd	r18, Y+5	; 0x05
 4a2:	3e 81       	ldd	r19, Y+6	; 0x06
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
	return ADC;
}

uint16_t GetY(void){	
	ADMUX = 0x00;					// ADC Channel 0
 4a4:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1<<ADSC);			// ADC Wandlung starten
 4a6:	36 9a       	sbi	0x06, 6	; 6
 4a8:	89 89       	ldd	r24, Y+17	; 0x11
 4aa:	9a 89       	ldd	r25, Y+18	; 0x12
 4ac:	eb 89       	ldd	r30, Y+19	; 0x13
 4ae:	fc 89       	ldd	r31, Y+20	; 0x14
	while (ADCSRA & (1<<ADSC));		// warten bis fertig
 4b0:	36 99       	sbic	0x06, 6	; 6
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <main+0x1f8>
 4b4:	9a 8b       	std	Y+18, r25	; 0x12
 4b6:	89 8b       	std	Y+17, r24	; 0x11
 4b8:	fc 8b       	std	Y+20, r31	; 0x14
 4ba:	eb 8b       	std	Y+19, r30	; 0x13
	return ADC;
 4bc:	84 b1       	in	r24, 0x04	; 4
 4be:	95 b1       	in	r25, 0x05	; 5
				x = xNeutral8 - MAX_RANGE;		
						
		// Y Wert einlesen:
		y = GetY();		
		// Deadzone berücksichtigen
		if (useDeadzone){			
 4c0:	dd 20       	and	r13, r13
 4c2:	b1 f0       	breq	.+44     	; 0x4f0 <main+0x238>
			if (y > yNeutral16){
 4c4:	88 16       	cp	r8, r24
 4c6:	99 06       	cpc	r9, r25
 4c8:	40 f4       	brcc	.+16     	; 0x4da <main+0x222>
				if (y <= (yNeutral16+yDeadzone))
 4ca:	49 81       	ldd	r20, Y+1	; 0x01
 4cc:	5a 81       	ldd	r21, Y+2	; 0x02
 4ce:	48 17       	cp	r20, r24
 4d0:	59 07       	cpc	r21, r25
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <main+0x21e>
 4d4:	94 c0       	rjmp	.+296    	; 0x5fe <main+0x346>
					y = yNeutral16;
				else
					y = y - yDeadzone;
 4d6:	84 19       	sub	r24, r4
 4d8:	95 09       	sbc	r25, r5
			}
			if (y < yNeutral16){
 4da:	88 15       	cp	r24, r8
 4dc:	99 05       	cpc	r25, r9
 4de:	40 f4       	brcc	.+16     	; 0x4f0 <main+0x238>
				if (y >= (yNeutral16-yDeadzone))
 4e0:	6b 81       	ldd	r22, Y+3	; 0x03
 4e2:	7c 81       	ldd	r23, Y+4	; 0x04
 4e4:	86 17       	cp	r24, r22
 4e6:	97 07       	cpc	r25, r23
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <main+0x234>
 4ea:	89 c0       	rjmp	.+274    	; 0x5fe <main+0x346>
					y = yNeutral16;
				else
					y = y + yDeadzone;
 4ec:	84 0d       	add	r24, r4
 4ee:	95 1d       	adc	r25, r5
	}	
	while (1);					
}

uint8_t ScaleDown(uint16_t raw16, uint8_t c){
	return  (uint8_t) ( (raw16*c) >> 8);	
 4f0:	6b 2d       	mov	r22, r11
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	a6 d0       	rcall	.+332    	; 0x642 <__mulhi3>
				else
					y = y + yDeadzone;
			}
		}		
		// runterskalieren	
		y = ScaleDown(y, yFaktor);		
 4f6:	89 2f       	mov	r24, r25
 4f8:	90 e0       	ldi	r25, 0x00	; 0
		// auf +/-84 begrenzen
		if (y>yNeutral8)
 4fa:	eb 89       	ldd	r30, Y+19	; 0x13
 4fc:	fc 89       	ldd	r31, Y+20	; 0x14
 4fe:	e8 17       	cp	r30, r24
 500:	f9 07       	cpc	r31, r25
 502:	40 f4       	brcc	.+16     	; 0x514 <main+0x25c>
			if ( (y-yNeutral8) > MAX_RANGE)
 504:	ac 01       	movw	r20, r24
 506:	4e 1b       	sub	r20, r30
 508:	5f 0b       	sbc	r21, r31
 50a:	45 35       	cpi	r20, 0x55	; 85
 50c:	51 05       	cpc	r21, r1
 50e:	10 f0       	brcs	.+4      	; 0x514 <main+0x25c>
				y = yNeutral8 + MAX_RANGE;
 510:	8f 85       	ldd	r24, Y+15	; 0x0f
 512:	98 89       	ldd	r25, Y+16	; 0x10
		if (y<yNeutral8)
 514:	4b 89       	ldd	r20, Y+19	; 0x13
 516:	5c 89       	ldd	r21, Y+20	; 0x14
 518:	84 17       	cp	r24, r20
 51a:	95 07       	cpc	r25, r21
 51c:	38 f4       	brcc	.+14     	; 0x52c <main+0x274>
			if ( (yNeutral8-y) > MAX_RANGE)
 51e:	48 1b       	sub	r20, r24
 520:	59 0b       	sbc	r21, r25
 522:	45 35       	cpi	r20, 0x55	; 85
 524:	51 05       	cpc	r21, r1
 526:	10 f0       	brcs	.+4      	; 0x52c <main+0x274>
				y = yNeutral8 - MAX_RANGE;
 528:	8d 85       	ldd	r24, Y+13	; 0x0d
 52a:	9e 85       	ldd	r25, Y+14	; 0x0e
	
		//Anzahl Steps berechnen
		xSteps =  (int16_t) x - xOld;
 52c:	a9 01       	movw	r20, r18
 52e:	4e 19       	sub	r20, r14
 530:	5f 09       	sbc	r21, r15
		ySteps =  (int16_t) y - yOld;
 532:	bc 01       	movw	r22, r24
 534:	e9 89       	ldd	r30, Y+17	; 0x11
 536:	fa 89       	ldd	r31, Y+18	; 0x12
 538:	6e 1b       	sub	r22, r30
 53a:	7f 0b       	sbc	r23, r31
		
		// wenn entspr. Jumper gebrückt, invertieren:
		if (INVX)
 53c:	ca 99       	sbic	0x19, 2	; 25
 53e:	03 c0       	rjmp	.+6      	; 0x546 <main+0x28e>
			xSteps = -xSteps;
 540:	50 95       	com	r21
 542:	41 95       	neg	r20
 544:	5f 4f       	sbci	r21, 0xFF	; 255
		if (INVY)
 546:	cb 99       	sbic	0x19, 3	; 25
 548:	40 c0       	rjmp	.+128    	; 0x5ca <main+0x312>
			ySteps = -ySteps;
 54a:	70 95       	com	r23
 54c:	61 95       	neg	r22
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	eb 89       	ldd	r30, Y+19	; 0x13
 552:	fc 89       	ldd	r31, Y+20	; 0x14
		//alte Werte für nächsten Durchlauf speichern
		xOld = x;
		yOld = y;
		
		//solange es noch Steps abzuarbeiten gibt:
		while ( (xSteps!=0) || (ySteps!=0) ){
 554:	41 15       	cp	r20, r1
 556:	51 05       	cpc	r21, r1
 558:	61 f4       	brne	.+24     	; 0x572 <main+0x2ba>
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	89 f4       	brne	.+34     	; 0x582 <main+0x2ca>
 560:	fc 8b       	std	Y+20, r31	; 0x14
 562:	eb 8b       	std	Y+19, r30	; 0x13
		if (INVY)
			ySteps = -ySteps;
		
		//alte Werte für nächsten Durchlauf speichern
		xOld = x;
		yOld = y;
 564:	9a 8b       	std	Y+18, r25	; 0x12
 566:	89 8b       	std	Y+17, r24	; 0x11
			xSteps = -xSteps;
		if (INVY)
			ySteps = -ySteps;
		
		//alte Werte für nächsten Durchlauf speichern
		xOld = x;
 568:	79 01       	movw	r14, r18
 56a:	5a cf       	rjmp	.-332    	; 0x420 <main+0x168>
	
	// bestimmen, ob Deadzones verwendet werden:
	if ( (xDeadzone==0) && (yDeadzone==0) )
		useDeadzone = 0;
	else
		useDeadzone = 1;
 56c:	dd 24       	eor	r13, r13
 56e:	d3 94       	inc	r13
 570:	e2 ce       	rjmp	.-572    	; 0x336 <main+0x7e>
		yOld = y;
		
		//solange es noch Steps abzuarbeiten gibt:
		while ( (xSteps!=0) || (ySteps!=0) ){
								
			if (xSteps<0){
 572:	57 fd       	sbrc	r21, 7
 574:	31 c0       	rjmp	.+98     	; 0x5d8 <main+0x320>
	return result;
}

uint8_t RotateRight (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<0) )
 576:	10 ff       	sbrs	r17, 0
 578:	2b c0       	rjmp	.+86     	; 0x5d0 <main+0x318>
		result = (cData>>1)|(1<<7);
 57a:	16 95       	lsr	r17
 57c:	10 68       	ori	r17, 0x80	; 128
				xWheel = RotateLeft(xWheel);
				xSteps++;				
			}						
			if (xSteps>0){
				xWheel = RotateRight(xWheel);
				xSteps--;			
 57e:	41 50       	subi	r20, 0x01	; 1
 580:	50 40       	sbci	r21, 0x00	; 0
			}	
				
			if (ySteps>0){
 582:	16 16       	cp	r1, r22
 584:	17 06       	cpc	r1, r23
 586:	84 f5       	brge	.+96     	; 0x5e8 <main+0x330>
	return result;
}

uint8_t RotateRight (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<0) )
 588:	00 ff       	sbrs	r16, 0
 58a:	24 c0       	rjmp	.+72     	; 0x5d4 <main+0x31c>
		result = (cData>>1)|(1<<7);
 58c:	06 95       	lsr	r16
 58e:	00 68       	ori	r16, 0x80	; 128
				xSteps--;			
			}	
				
			if (ySteps>0){
				yWheel = RotateRight(yWheel);
				ySteps--;				
 590:	61 50       	subi	r22, 0x01	; 1
 592:	70 40       	sbci	r23, 0x00	; 0
				yWheel = RotateLeft(yWheel);
				ySteps++;			
			}		
			
			// neue XA/XB- und YA/YB-Werte ausgeben:			
			PORTB = (PORTB&0b11111100)|(xWheel & 0b00000011); 
 594:	e8 b2       	in	r14, 0x18	; 24
 596:	0f 2e       	mov	r0, r31
 598:	f3 e0       	ldi	r31, 0x03	; 3
 59a:	ff 2e       	mov	r15, r31
 59c:	f0 2d       	mov	r31, r0
 59e:	f1 22       	and	r15, r17
 5a0:	0f 2e       	mov	r0, r31
 5a2:	fc ef       	ldi	r31, 0xFC	; 252
 5a4:	af 2e       	mov	r10, r31
 5a6:	f0 2d       	mov	r31, r0
 5a8:	ea 20       	and	r14, r10
 5aa:	fe 28       	or	r15, r14
 5ac:	f8 ba       	out	0x18, r15	; 24
			PORTA = (PORTA&0b00111111)|(yWheel & 0b11000000);
 5ae:	eb b2       	in	r14, 0x1b	; 27
 5b0:	0f 2e       	mov	r0, r31
 5b2:	f0 ec       	ldi	r31, 0xC0	; 192
 5b4:	ff 2e       	mov	r15, r31
 5b6:	f0 2d       	mov	r31, r0
 5b8:	f0 22       	and	r15, r16
 5ba:	0f 2e       	mov	r0, r31
 5bc:	ff e3       	ldi	r31, 0x3F	; 63
 5be:	af 2e       	mov	r10, r31
 5c0:	f0 2d       	mov	r31, r0
 5c2:	ea 20       	and	r14, r10
 5c4:	fe 28       	or	r15, r14
 5c6:	fb ba       	out	0x1b, r15	; 27
 5c8:	c5 cf       	rjmp	.-118    	; 0x554 <main+0x29c>
 5ca:	eb 89       	ldd	r30, Y+19	; 0x13
 5cc:	fc 89       	ldd	r31, Y+20	; 0x14
 5ce:	c2 cf       	rjmp	.-124    	; 0x554 <main+0x29c>
uint8_t RotateRight (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<0) )
		result = (cData>>1)|(1<<7);
	else
		result = (cData>>1);	
 5d0:	16 95       	lsr	r17
 5d2:	d5 cf       	rjmp	.-86     	; 0x57e <main+0x2c6>
 5d4:	06 95       	lsr	r16
 5d6:	dc cf       	rjmp	.-72     	; 0x590 <main+0x2d8>
	return ADC;
}

uint8_t RotateLeft (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<7) )
 5d8:	17 fd       	sbrc	r17, 7
 5da:	14 c0       	rjmp	.+40     	; 0x604 <main+0x34c>
		result = (cData<<1)|(1<<0);
	else 
		result = (cData<<1);	
 5dc:	11 0f       	add	r17, r17
		//solange es noch Steps abzuarbeiten gibt:
		while ( (xSteps!=0) || (ySteps!=0) ){
								
			if (xSteps<0){
				xWheel = RotateLeft(xWheel);
				xSteps++;				
 5de:	4f 5f       	subi	r20, 0xFF	; 255
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
			if (xSteps>0){
				xWheel = RotateRight(xWheel);
				xSteps--;			
			}	
				
			if (ySteps>0){
 5e2:	16 16       	cp	r1, r22
 5e4:	17 06       	cpc	r1, r23
 5e6:	84 f2       	brlt	.-96     	; 0x588 <main+0x2d0>
				yWheel = RotateRight(yWheel);
				ySteps--;				
			}			
			if (ySteps<0){
 5e8:	61 15       	cp	r22, r1
 5ea:	71 05       	cpc	r23, r1
 5ec:	99 f2       	breq	.-90     	; 0x594 <main+0x2dc>
	return ADC;
}

uint8_t RotateLeft (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<7) )
 5ee:	07 fd       	sbrc	r16, 7
 5f0:	0c c0       	rjmp	.+24     	; 0x60a <main+0x352>
		result = (cData<<1)|(1<<0);
	else 
		result = (cData<<1);	
 5f2:	00 0f       	add	r16, r16
				yWheel = RotateRight(yWheel);
				ySteps--;				
			}			
			if (ySteps<0){
				yWheel = RotateLeft(yWheel);
				ySteps++;			
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	cd cf       	rjmp	.-102    	; 0x594 <main+0x2dc>
					x = xNeutral16;
				else
					x = x - xDeadzone;
			}
			if (x < xNeutral16){
				if (x >= (xNeutral16-xDeadzone))
 5fa:	9d 01       	movw	r18, r26
 5fc:	53 cf       	rjmp	.-346    	; 0x4a4 <main+0x1ec>
					y = yNeutral16;
				else
					y = y - yDeadzone;
			}
			if (y < yNeutral16){
				if (y >= (yNeutral16-yDeadzone))
 5fe:	8b 89       	ldd	r24, Y+19	; 0x13
 600:	9c 89       	ldd	r25, Y+20	; 0x14
 602:	94 cf       	rjmp	.-216    	; 0x52c <main+0x274>
}

uint8_t RotateLeft (uint8_t cData){
	uint8_t result;
	if ( cData & (1<<7) )
		result = (cData<<1)|(1<<0);
 604:	11 0f       	add	r17, r17
 606:	11 60       	ori	r17, 0x01	; 1
 608:	ea cf       	rjmp	.-44     	; 0x5de <main+0x326>
 60a:	00 0f       	add	r16, r16
 60c:	01 60       	ori	r16, 0x01	; 1
 60e:	f2 cf       	rjmp	.-28     	; 0x5f4 <main+0x33c>
	}
	
	// Wenn PINA.5 = 0, dann beim nächsten Einschalten
	// Calibration Mode mit Deadzone aktivieren:
	if( ((1<<PINA5)&PINA)==0){
		eeprom_write_byte(&calibrationStep, 1);
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	61 e0       	ldi	r22, 0x01	; 1
 616:	46 d0       	rcall	.+140    	; 0x6a4 <__eewr_byte_tn24a>
 618:	ff cf       	rjmp	.-2      	; 0x618 <main+0x360>
	yOld = yNeutral8;	
	
	// Wenn PINB.2 = 0, dann beim nächsten Einschalten
	// normalen Calibration Mode aktivieren:
	if( ((1<<PINB2)&PINB)==0){
		eeprom_write_byte(&calibrationStep, 5);		
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	65 e0       	ldi	r22, 0x05	; 5
 620:	41 d0       	rcall	.+130    	; 0x6a4 <__eewr_byte_tn24a>
		eeprom_write_byte(&dx, 0);
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	3d d0       	rcall	.+122    	; 0x6a4 <__eewr_byte_tn24a>
		eeprom_write_byte(&dy, 0);		
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	39 d0       	rcall	.+114    	; 0x6a4 <__eewr_byte_tn24a>
 632:	ff cf       	rjmp	.-2      	; 0x632 <main+0x37a>

00000634 <ScaleDown>:
			}
	}	
	while (1);					
}

uint8_t ScaleDown(uint16_t raw16, uint8_t c){
 634:	9c 01       	movw	r18, r24
 636:	86 2f       	mov	r24, r22
	return  (uint8_t) ( (raw16*c) >> 8);	
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	b9 01       	movw	r22, r18
 63c:	02 d0       	rcall	.+4      	; 0x642 <__mulhi3>
 63e:	89 2f       	mov	r24, r25
 640:	08 95       	ret

00000642 <__mulhi3>:
 642:	55 27       	eor	r21, r21
 644:	00 24       	eor	r0, r0

00000646 <__mulhi3_loop>:
 646:	80 ff       	sbrs	r24, 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <__mulhi3_skip1>
 64a:	06 0e       	add	r0, r22
 64c:	57 1f       	adc	r21, r23

0000064e <__mulhi3_skip1>:
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	61 15       	cp	r22, r1
 654:	71 05       	cpc	r23, r1
 656:	21 f0       	breq	.+8      	; 0x660 <__mulhi3_exit>
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	99 f7       	brne	.-26     	; 0x646 <__mulhi3_loop>

00000660 <__mulhi3_exit>:
 660:	95 2f       	mov	r25, r21
 662:	80 2d       	mov	r24, r0
 664:	08 95       	ret

00000666 <__udivmodhi4>:
 666:	aa 1b       	sub	r26, r26
 668:	bb 1b       	sub	r27, r27
 66a:	51 e1       	ldi	r21, 0x11	; 17
 66c:	07 c0       	rjmp	.+14     	; 0x67c <__udivmodhi4_ep>

0000066e <__udivmodhi4_loop>:
 66e:	aa 1f       	adc	r26, r26
 670:	bb 1f       	adc	r27, r27
 672:	a6 17       	cp	r26, r22
 674:	b7 07       	cpc	r27, r23
 676:	10 f0       	brcs	.+4      	; 0x67c <__udivmodhi4_ep>
 678:	a6 1b       	sub	r26, r22
 67a:	b7 0b       	sbc	r27, r23

0000067c <__udivmodhi4_ep>:
 67c:	88 1f       	adc	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	5a 95       	dec	r21
 682:	a9 f7       	brne	.-22     	; 0x66e <__udivmodhi4_loop>
 684:	80 95       	com	r24
 686:	90 95       	com	r25
 688:	bc 01       	movw	r22, r24
 68a:	cd 01       	movw	r24, r26
 68c:	08 95       	ret

0000068e <__eerd_byte_tn24a>:
 68e:	e1 99       	sbic	0x1c, 1	; 28
 690:	fe cf       	rjmp	.-4      	; 0x68e <__eerd_byte_tn24a>
 692:	1f ba       	out	0x1f, r1	; 31
 694:	8e bb       	out	0x1e, r24	; 30
 696:	e0 9a       	sbi	0x1c, 0	; 28
 698:	99 27       	eor	r25, r25
 69a:	8d b3       	in	r24, 0x1d	; 29
 69c:	08 95       	ret

0000069e <__eerd_word_tn24a>:
 69e:	a8 e1       	ldi	r26, 0x18	; 24
 6a0:	42 e0       	ldi	r20, 0x02	; 2
 6a2:	13 c0       	rjmp	.+38     	; 0x6ca <__eerd_blraw_tn24a>

000006a4 <__eewr_byte_tn24a>:
 6a4:	26 2f       	mov	r18, r22

000006a6 <__eewr_r18_tn24a>:
 6a6:	e1 99       	sbic	0x1c, 1	; 28
 6a8:	fe cf       	rjmp	.-4      	; 0x6a6 <__eewr_r18_tn24a>
 6aa:	1c ba       	out	0x1c, r1	; 28
 6ac:	1f ba       	out	0x1f, r1	; 31
 6ae:	8e bb       	out	0x1e, r24	; 30
 6b0:	2d bb       	out	0x1d, r18	; 29
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	e2 9a       	sbi	0x1c, 2	; 28
 6b8:	e1 9a       	sbi	0x1c, 1	; 28
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	01 96       	adiw	r24, 0x01	; 1
 6be:	08 95       	ret

000006c0 <__eewr_word_tn24a>:
 6c0:	f1 df       	rcall	.-30     	; 0x6a4 <__eewr_byte_tn24a>
 6c2:	27 2f       	mov	r18, r23
 6c4:	f0 cf       	rjmp	.-32     	; 0x6a6 <__eewr_r18_tn24a>

000006c6 <__eerd_block_tn24a>:
 6c6:	a8 2f       	mov	r26, r24
 6c8:	86 2f       	mov	r24, r22

000006ca <__eerd_blraw_tn24a>:
 6ca:	e8 2f       	mov	r30, r24
 6cc:	e1 99       	sbic	0x1c, 1	; 28
 6ce:	fe cf       	rjmp	.-4      	; 0x6cc <__eerd_blraw_tn24a+0x2>
 6d0:	1f ba       	out	0x1f, r1	; 31
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <__eerd_blraw_tn24a+0x14>
 6d4:	ee bb       	out	0x1e, r30	; 30
 6d6:	e0 9a       	sbi	0x1c, 0	; 28
 6d8:	e3 95       	inc	r30
 6da:	0d b2       	in	r0, 0x1d	; 29
 6dc:	0d 92       	st	X+, r0
 6de:	41 50       	subi	r20, 0x01	; 1
 6e0:	c8 f7       	brcc	.-14     	; 0x6d4 <__eerd_blraw_tn24a+0xa>
 6e2:	08 95       	ret

000006e4 <_exit>:
 6e4:	f8 94       	cli

000006e6 <__stop_program>:
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <__stop_program>
